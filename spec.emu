<!doctype html>
<meta charset="utf8">
<link rel="stylesheet" href="./spec.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/8.4/styles/github.min.css">
<script src="./spec.js"></script>
<pre class="metadata">
title: Intl.MessageFormat
stage: 1
contributors: Eemeli Aro
</pre>

<emu-clause id="messageformat-objects">
  <h1>MessageFormat Objects</h1>

  <emu-clause id="sec-intl-messageformat-constructor">
    <h1>The Intl.MessageFormat Constructor</h1>

    <p>
      The MessageFormat constructor is the <dfn>%MessageFormat%</dfn> intrinsic object
      and a standard built-in property of the Intl object.
      Behaviour common to all service constructor properties of the Intl object
      is specified in <a href="https://tc39.es/ecma402/#sec-internal-slots">9.1</a>.
    </p>

    <emu-clause id="sec-intl.messageformat">
      <h1>Intl.MessageFormat ( _source_, [ _locales_ [ , _options_ ] ] )</h1>

      <p>
        When the `Intl.MessageFormat` function is called with arguments
        _source_, _locales_, and _options_, the following steps are taken:
      </p>

      <emu-alg>
        1. If NewTarget is *undefined*, throw a *TypeError* exception.
        1. Let _messageFormat_ be ? OrdinaryCreateFromConstructor(NewTarget, %MessageFormat.prototype%,
           &laquo; [[InitializedMessageFormat]], [[LocaleMatcher]], [[MessageData]], [[RequestedLocales]], [[Runtime]] &raquo;).
        1. Return ? InitializeMessageFormat(_messageFormat_, _source_, _locales_, _options_).
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-initializemessageformat" aoid="InitializeMessageFormat">
      <h1>InitializeMessageFormat ( _messageFormat_, _source_, _locales_, _options_ )</h1>

      <p>
        The abstract operation InitializeMessageFormat accepts the arguments
        _messageFormat_ (which must be an object), _source_, _locales_, and _options_.
        It initializes _messageFormat_ as a MessageFormat object.
        The following steps are taken:
      </p>

      <emu-alg>
        1. If _source_ is *undefined*, throw a *TypeError* exception.
        1. Let _msgData_ be ? GetMessageData(_source_).
        1. Let _requestedLocales_ be ? CanonicalizeLocaleList(_locales_).
        1. Set _options_ to ? GetOptionsObject(_options_).
        1. Let _matcher_ be ? GetOption(_options_, *"localeMatcher"*, ~string~,
           &laquo; *"lookup"*, *"best fit"* &raquo;, *"best fit"*).
        1. Let _userFunctions_ be ? Get(_options_, *"functions"*).
        1. Let _functions_ be ? GetMessageFunctions(_userFunctions_).
        1. Set _messageFormat_.[[MessageData]] to _msgData_.
        1. Set _messageFormat_.[[RequestedLocales]] to _requestedLocales_.
        1. Set _messageFormat_.[[LocaleMatcher]] to _matcher_.
        1. Set _messageFormat_.[[Functions]] to _functions_.
        1. Return _messageFormat_.
      </emu-alg>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-messageformat-constructor">
    <h1>Properties of the Intl.MessageFormat Constructor</h1>

    <p>
      The Intl.MessageFormat constructor has the following properties:
    </p>

    <emu-clause id="sec-intl.messageformat.prototype">
      <h1>Intl.MessageFormat.prototype</h1>

      <p>
        The value of `Intl.MessageFormat.prototype` is %MessageFormat.prototype%.
      </p>
      <p>
        This property has the attributes
        { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *false* }.
      </p>
    </emu-clause>

    <emu-clause id="sec-intl.messageformat-internal-slots">
      <h1>Internal slots</h1>

      <emu-note>
        Unlike other Intl formatters,
        MessageFormat does not have a single list of locales that it supports,
        as it calls other formatters as necessary.
      </emu-note>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-messageformat-prototype-object">
    <h1>Properties of the Intl.MessageFormat Prototype Object</h1>

    <p>
      The Intl.MessageFormat prototype object is itself an ordinary object.
      <dfn>%MessageFormat.prototype%</dfn> is not an Intl.MessageFormat instance
      and does not have an [[InitializedMessageFormat]] internal slot
      or any of the other internal slots of Intl.MessageFormat instance objects.
    </p>

    <emu-clause id="sec-intl.messageformat.prototype.constructor">
      <h1>Intl.MessageFormat.prototype.constructor</h1>

      <p>
        The initial value of `Intl.MessageFormat.prototype.constructor` is %MessageFormat%.
      </p>
    </emu-clause>

    <emu-clause id="sec-intl.messageformat.prototype-tostringtag">
      <h1>Intl.MessageFormat.prototype [ @@toStringTag ]</h1>

      <p>
        The initial value of the @@toStringTag property is the String value *"Intl.MessageFormat"*.
      </p>
      <p>
        This property has the attributes
        { [[Writable]]: *false*, [[Enumerable]]: *false*, [[Configurable]]: *true* }.
      </p>
    </emu-clause>

    <emu-clause id="sec-intl.messageformat.prototype.format">
      <h1>Intl.MessageFormat.prototype.format ( [ _values_ [ , _onError_ ] ] )</h1>

      <p>
        When the `format` method is called with the optional arguments
        _values_ and _onError_, the following steps are taken:
      </p>

      <emu-alg>
        1. Let _mf_ be the *this* value.
        1. Perform ? RequireInternalSlot(_mf_, [[InitializedMessageFormat]]).
        1. Let _msg_ be ? ResolveMessage(_mf_, _values_, _onError_).
        1. Let _result_ be an empty String.
        1. For each element _mv_ of _msg_, do
           1. If _mv_ is a String, then
              1. Let _stringValue_ be _mv_.
           1. Else,
              1. Let _toString_ be ? Get(_mv_, *"toString"*).
              1. Let _toStringResult_ be Completion(Call(_toString_, _mv_)).
              1. If _toStringResult_ is a normal completion, then
                 1. Let _stringValue_ be _toStringResult_.[[Value]].
              1. Else,
                 1. Perform ? HandleMessageFormatError(_onError_, _stringResult_).
                 1. Let _stringValue_ be MessageFallbackString(_mv_).
           1. Set _result_ to the string-concatenation of _result_ and _stringValue_.
        1. Return _result_.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-intl.messageformat.prototype.formatToParts">
      <h1>Intl.MessageFormat.prototype.formatToParts ( [ _values_ [ , _onError_ ] ] )</h1>

      <p>
        When the `formatToParts` method is called with the optional arguments
        _values_ and _onError_, the following steps are taken:
      </p>

      <emu-alg>
        1. Let _mf_ be the *this* value.
        1. Perform ? RequireInternalSlot(_mf_, [[InitializedMessageFormat]]).
        1. Let _msg_ be ? ResolveMessage(_mf_, _values_, _onError_).
        1. Let _result_ be an empty List of Objects.
        1. For each element _mv_ of _msg_, do
           1. If _mv_ is a String, then
              1. Let _textPart_ be OrdinaryObjectCreate(%Object.prototype%).
              1. Perform ! CreateDataPropertyOrThrow(_textPart_, *"type"*, *"text"*).
              1. Perform ! CreateDataPropertyOrThrow(_textPart_, *"value"*, _mv_).
              1. Append _textPart_ to _result_.
           1. Else,
              1. Let _toParts_ be ? Get(_mv_, *"toParts"*).
              1. Let _partResult_ be Completion(Call(_toParts_, _mv_)).
              1. If _partResult_ is a normal completion, then
                 1. Let _parts_ be _partResult_.[[Value]].
                 1. For each _part_ of _parts_, append _part_ to _result_.
              1. Else,
                 1. Perform ? HandleMessageFormatError(_onError_, _partResult_).
                 1. Let _fallbackPart_ be MessageFallbackPart(_mv_).
                 1. Append _fallbackPart_ to _result_.
        1. Return CreateArrayFromList(_result_).
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-intl.messageformat.prototype.resolvedoptions">
      <h1>Intl.MessageFormat.prototype.resolvedOptions ( )</h1>

      <p>
        This function provides access to the locale and options
        computed during initialization of the object.
      </p>

      <emu-alg>
        1. Let _mf_ be the *this* value.
        1. Perform ? RequireInternalSlot(_mf_, [[InitializedMessageFormat]]).
        1. Let _options_ be OrdinaryObjectCreate(%Object.prototype%).
        1. For each row of <emu-xref href="#table-messageformat-resolvedoptions-properties"></emu-xref>,
           except the header row, in table order, do
           1. Let _p_ be the Property value of the current row.
           1. Let _v_ be the value of _mf_'s internal slot
              whose name is the Internal Slot value of the current row.
           1. If _v_ is not *undefined*, then
              1. Perform ! CreateDataPropertyOrThrow(_options_, _p_, _v_).
        1. Return _options_.
      </emu-alg>

      <emu-table id="table-messageformat-resolvedoptions-properties">
        <emu-caption>Resolved Options of MessageFormat Instances</emu-caption>
        <table class="real-table">
          <thead>
            <tr>
              <th>Internal Slot</th>
              <th>Property</th>
            </tr>
          </thead>
          <tr>
            <td>[[Functions]]</td>
            <td>*"functions"*</td>
          </tr>
          <tr>
            <td>[[LocaleMatcher]]</td>
            <td>*"localeMatcher"*</td>
          </tr>
          <tr>
            <td>[[RequestedLocales]]</td>
            <td>*"locales"*</td>
          </tr>
          <tr>
            <td>[[MessageData]]</td>
            <td>*"message"*</td>
          </tr>
        </table>
      </emu-table>
    </emu-clause>
  </emu-clause>

  <emu-clause id="sec-properties-of-intl-messageformat-instances">
    <h1>Properties of Intl.MessageFormat Instances</h1>

    <p>
      Intl.MessageFormat instances are ordinary objects that inherit properties from %MessageFormat.prototype%.
    </p>

    <p>
      Intl.MessageFormat instances have an [[InitializedMessageFormat]] internal slot.
    </p>

    <p>
      Intl.MessageFormat instances also have several internal slots that are computed by the constructor:
    </p>

    <ul>
      <li>
        [[LocaleMatcher]] is one of the String values *"lookup"* or *"best fit"*,
        identifying the locale matcher used.
      </li>
      <li>[[MessageData]] is an Object ...TODO</li>
      <li>
        [[RequestedLocales]] is a List of String values
        with the canonicalized language tags of the requested locales
        to use for message formatting.
      </li>
      <li>[[Functions]] is an Object ...TODO</li>
    </ul>
  </emu-clause>

  <emu-clause id="sec-intl-messageformat-abstracts">
    <h1>Abstract Operations for MessageFormat Objects</h1>

    <emu-clause id="sec-getmessagedata" type="implementation-defined abstract operation">
      <h1>
        GetMessageData (
          _source_: a String,
        ): an Object
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>
          <p>
            It determines the message data representation corresponding to the input _source_ according to the
            <a href="https://github.com/unicode-org/message-format-wg/blob/main/spec/syntax.md">Unicode MessageFormat 2.0 syntax</a>.
            The message data representation is an Object conforming to the
            <a href="https://github.com/unicode-org/message-format-wg/blob/main/spec/data-model/message.json">JSON Schema definition</a>
            of the Unicode MessageFormat 2.0 specification.
          </p>

          <p>If _source_ contains a syntax or data model error, this operation throws a %SyntaxError%.</p>
        </dd>
      </dl>
    </emu-clause>

    <emu-clause id="sec-getmessagefunctions" type="abstract operation">
      <h1>
        GetMessageFunctions (
          _userFunctions_: an Object or undefined,
        ): a Record
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It determines the functions available during message formatting.</dd>
      </dl>

      <emu-alg>
        1. ...TODO
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-handlemessageformaterror" type="abstract operation">
      <h1>
        HandleMessageFormatError(
          _onError_: a Function or undefined,
          _completionRecord_: a Completion Record,
        )
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It handles errors during formatting.</dd>
      </dl>

      <emu-alg>
        1. Assert: _completionRecord_ is a Completion Record.
        1. Assert: _completionRecord_ is an abrupt completion.
        1. Let _error_ be _completionRecord_.[[Value]].
        1. If _onError_ is not *undefined*, then
           1. Perform ? Call(_onError_, *undefined*, &laquo; _error_ &raquo;).
        1. Else if an appropriate notification mechanism exists, then
           1. Issue a warning for _error_.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-messagefallbackpart" type="abstract operation">
      <h1>
        MessageFallbackPart (
          _mv_: an Object
        ): an Object
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It gets the fallback formatted part representation of a MessageValue</dd>
      </dl>

      <emu-alg>
        1. Let _result_ be OrdinaryObjectCreate(%Object.prototype%).
        1. Let _source_ be MessageValueSource(_mv_).
        1. Perform ! CreateDataPropertyOrThrow(_result_, *"type"*, *"fallback"*).
        1. Perform ! CreateDataPropertyOrThrow(_result_, *"source"*, _source_).
        1. Return _result_.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-messagefallbackstring" type="abstract operation">
      <h1>
        MessageFallbackString (
          _mv_: an Object
        ): a String
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It gets the fallback formatted string representation of a MessageValue</dd>
      </dl>

      <emu-alg>
        1. Let _source_ be MessageValueSource(_mv_).
        1. Let _result_ be the string-concatenation of *"{"*, _source_, and *"}"*.
        1. Return _result_.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-messagevaluesource" type="abstract operation">
      <h1>
        MessageValueSource (
          _mv_: an Object
        ): a String
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>
          It gets the source string representation of a MessageValue,
          which should be always available.
          On any error, return the Unicode replacement character � instead.
        </dd>
      </dl>

      <emu-alg>
        1. Let _source_ be Completion(Get(_mv_, *"source"*)).
        1. If _source_ is a normal completion, then
           1. Let _str_ be _source_.[[Value]].
           1. If _str_ is a String, then
              1. Return _str_.
        1. Return *"\uFFFD"*.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-resolveexpression" type="abstract operation">
      <h1>
        ResolveExpression (
          _mf_: an Object,
          _values_: an Object or undefined,
          _onError_: a Function or undefined,
          _expression_: an Object,
        ): an Object
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It resolves the value of an expression for selection and formatting.</dd>
      </dl>

      <emu-alg>
        1. ...TODO
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-resolvemessage" type="abstract operation">
      <h1>
        ResolveMessage (
          _mf_: an Object,
          _values_: an Object or undefined,
          _onError_: a Function or undefined,
        ): a List of Objects
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It resolves a message during formatting into a List of MessageValue Objects.</dd>
      </dl>

      <emu-alg>
        1. Let _result_ be an empty List.
        1. Let _pattern_ be ? SelectPattern(_mf_, _values_, _onError_).
        1. For each element _el_ of _pattern_,
           1. If _el_ is a String, then
              1. Append _el_ to _result_.
           1. Else,
              1. Let _mv_ be ResolveExpression(_mf_, _values_, _onError_, _el_).
              1. Append _mv_ to _result_.
        1. Return _result_.
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-selectpattern" type="abstract operation">
      <h1>
        SelectPattern (
          _mf_: an Object,
          _values_: an Object or undefined,
          _onError_: a Function or undefined,
        ): a List of Strings and Objects
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>It selects the pattern to format from the message data model.</dd>
      </dl>

      <emu-alg>
        1. Let _msgData_ be _mf_.[[MessageData]].
        1. Let _msgType_ be ? Get(_msgData_, *"type"*).
        1. Assert: _msgType_ is a String.
        1. If _msgType_ is *"message"*, then
           1. Let _pattern_ be ? Get(_msgData_, *"pattern"*).
        1. Else,
           1. Let _selectorsData_ be ? Get(_msgData_, *"selectors"*).
           1. Let _selectorExpressions_ be ? CreateListFromArrayLike(_selectorsData_, &laquo; Object &raquo;).
           1. Let _selectors_ be an empty List of Object and Null values.
           1. For each element _selExp_ of _selectorExpressions_,
              1. Let _sel_ be ResolveExpression(_mf_, _values_, _onError_, _selExp_).
              1. Let _selectKeys_ be ? Get(_sel_, *"selectKeys"*).
              1. If IsCallable(_selectKeys_) is *true*, then
                 1. Append _sel_ to _selectors_.
              1. Else,
                 1. Let _errorCompletion_ be ThrowCompletion(*TypeError*).
                 1. Perform ? HandleMessageFormatError(_onError_, _errorCompletion_).
                 1. Append *null* to _selectors_.
           1. Let _variantsArray_ be ? Get(_msgData_, *"variants"*).
           1. Let _variants_ be ? CreateListFromArrayLike(_variantsArray_, &laquo; Object &raquo;).
           1. Let _selectedVariant_ be ? SelectVariant(_selectors_, _variants_, _onError_).
        1. Let _patternBody_ be ? Get(_pattern_, *"body"*).
        1. Return ? CreateListFromArrayLike(_patternBody_, &laquo; String, Object &raquo;).
      </emu-alg>
    </emu-clause>

    <emu-clause id="sec-selectvariant" type="implementation-defined abstract operation">
      <h1>
        SelectVariant (
          _selectors_: a List of Object and Null values,
          _variants_: a List of Objects,
          _onError_: a Function or undefined,
        ): an Object
      </h1>
      <dl class="header">
        <dt>description</dt>
        <dd>
          <p>
            It applies the variant selection method defined by
            the "Resolve Preferences", "Filter Variants", and "Sort Variants" steps of the
            <a href="https://github.com/unicode-org/message-format-wg/blob/main/spec/formatting.md#pattern-selection">Pattern Selection</a>
            section of the Unicode MessageFormat 2.0 specification.
          </p>

          <p>
            For the selection, Null values in _selectors_ indicate selectors for which selection will always fail.
            If any errors are encountered during the selection,
            the HandleMessageFormatError abstract operation must be called
            with _onError_ and an abrupt Completion Record containing an Error.
          </p>

          <p>
            The value returned by this operation must be an Object matching the JSON Schema definition of a message pattern:
            <a href="https://github.com/unicode-org/message-format-wg/blob/main/spec/data-model/message.json#/$defs/pattern">
              https://github.com/unicode-org/message-format-wg/blob/main/spec/data-model/message.json#/$defs/pattern
            </a>.
          </p>
        </dd>
      </dl>
    </emu-clause>
  </emu-clause>
</emu-clause>
